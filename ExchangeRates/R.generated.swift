//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `lightBlue`.
    static let lightBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightBlue")
    /// Color `lightGrey`.
    static let lightGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGrey")
    
    /// `UIColor(named: "lightBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "lightGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrey, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 52 fonts.
  struct font: Rswift.Validatable {
    /// Font `HelveticaNeue-BlackCondObl`.
    static let helveticaNeueBlackCondObl = Rswift.FontResource(fontName: "HelveticaNeue-BlackCondObl")
    /// Font `HelveticaNeue-BlackCond`.
    static let helveticaNeueBlackCond = Rswift.FontResource(fontName: "HelveticaNeue-BlackCond")
    /// Font `HelveticaNeue-BlackExtObl`.
    static let helveticaNeueBlackExtObl = Rswift.FontResource(fontName: "HelveticaNeue-BlackExtObl")
    /// Font `HelveticaNeue-BlackExt`.
    static let helveticaNeueBlackExt = Rswift.FontResource(fontName: "HelveticaNeue-BlackExt")
    /// Font `HelveticaNeue-BlackItalic`.
    static let helveticaNeueBlackItalic = Rswift.FontResource(fontName: "HelveticaNeue-BlackItalic")
    /// Font `HelveticaNeue-Black`.
    static let helveticaNeueBlack = Rswift.FontResource(fontName: "HelveticaNeue-Black")
    /// Font `HelveticaNeue-BoldCondObl`.
    static let helveticaNeueBoldCondObl = Rswift.FontResource(fontName: "HelveticaNeue-BoldCondObl")
    /// Font `HelveticaNeue-BoldExtObl`.
    static let helveticaNeueBoldExtObl = Rswift.FontResource(fontName: "HelveticaNeue-BoldExtObl")
    /// Font `HelveticaNeue-BoldExt`.
    static let helveticaNeueBoldExt = Rswift.FontResource(fontName: "HelveticaNeue-BoldExt")
    /// Font `HelveticaNeue-BoldItalic`.
    static let helveticaNeueBoldItalic = Rswift.FontResource(fontName: "HelveticaNeue-BoldItalic")
    /// Font `HelveticaNeue-BoldOutline`.
    static let helveticaNeueBoldOutline = Rswift.FontResource(fontName: "HelveticaNeue-BoldOutline")
    /// Font `HelveticaNeue-Bold`.
    static let helveticaNeueBold = Rswift.FontResource(fontName: "HelveticaNeue-Bold")
    /// Font `HelveticaNeue-CondensedBlack`.
    static let helveticaNeueCondensedBlack = Rswift.FontResource(fontName: "HelveticaNeue-CondensedBlack")
    /// Font `HelveticaNeue-CondensedBold`.
    static let helveticaNeueCondensedBold = Rswift.FontResource(fontName: "HelveticaNeue-CondensedBold")
    /// Font `HelveticaNeue-CondensedObl`.
    static let helveticaNeueCondensedObl = Rswift.FontResource(fontName: "HelveticaNeue-CondensedObl")
    /// Font `HelveticaNeue-Condensed`.
    static let helveticaNeueCondensed = Rswift.FontResource(fontName: "HelveticaNeue-Condensed")
    /// Font `HelveticaNeue-ExtBlackCondObl`.
    static let helveticaNeueExtBlackCondObl = Rswift.FontResource(fontName: "HelveticaNeue-ExtBlackCondObl")
    /// Font `HelveticaNeue-ExtBlackCond`.
    static let helveticaNeueExtBlackCond = Rswift.FontResource(fontName: "HelveticaNeue-ExtBlackCond")
    /// Font `HelveticaNeue-ExtendedObl`.
    static let helveticaNeueExtendedObl = Rswift.FontResource(fontName: "HelveticaNeue-ExtendedObl")
    /// Font `HelveticaNeue-Extended`.
    static let helveticaNeueExtended = Rswift.FontResource(fontName: "HelveticaNeue-Extended")
    /// Font `HelveticaNeue-HeavyCondObl`.
    static let helveticaNeueHeavyCondObl = Rswift.FontResource(fontName: "HelveticaNeue-HeavyCondObl")
    /// Font `HelveticaNeue-HeavyCond`.
    static let helveticaNeueHeavyCond = Rswift.FontResource(fontName: "HelveticaNeue-HeavyCond")
    /// Font `HelveticaNeue-HeavyExtObl`.
    static let helveticaNeueHeavyExtObl = Rswift.FontResource(fontName: "HelveticaNeue-HeavyExtObl")
    /// Font `HelveticaNeue-HeavyExt`.
    static let helveticaNeueHeavyExt = Rswift.FontResource(fontName: "HelveticaNeue-HeavyExt")
    /// Font `HelveticaNeue-HeavyItalic`.
    static let helveticaNeueHeavyItalic = Rswift.FontResource(fontName: "HelveticaNeue-HeavyItalic")
    /// Font `HelveticaNeue-Heavy`.
    static let helveticaNeueHeavy = Rswift.FontResource(fontName: "HelveticaNeue-Heavy")
    /// Font `HelveticaNeue-Italic`.
    static let helveticaNeueItalic = Rswift.FontResource(fontName: "HelveticaNeue-Italic")
    /// Font `HelveticaNeue-LightCondObl`.
    static let helveticaNeueLightCondObl = Rswift.FontResource(fontName: "HelveticaNeue-LightCondObl")
    /// Font `HelveticaNeue-LightCond`.
    static let helveticaNeueLightCond = Rswift.FontResource(fontName: "HelveticaNeue-LightCond")
    /// Font `HelveticaNeue-LightExtObl`.
    static let helveticaNeueLightExtObl = Rswift.FontResource(fontName: "HelveticaNeue-LightExtObl")
    /// Font `HelveticaNeue-LightExt`.
    static let helveticaNeueLightExt = Rswift.FontResource(fontName: "HelveticaNeue-LightExt")
    /// Font `HelveticaNeue-MediumCondObl`.
    static let helveticaNeueMediumCondObl = Rswift.FontResource(fontName: "HelveticaNeue-MediumCondObl")
    /// Font `HelveticaNeue-MediumCond`.
    static let helveticaNeueMediumCond = Rswift.FontResource(fontName: "HelveticaNeue-MediumCond")
    /// Font `HelveticaNeue-MediumExtObl`.
    static let helveticaNeueMediumExtObl = Rswift.FontResource(fontName: "HelveticaNeue-MediumExtObl")
    /// Font `HelveticaNeue-MediumExt`.
    static let helveticaNeueMediumExt = Rswift.FontResource(fontName: "HelveticaNeue-MediumExt")
    /// Font `HelveticaNeue-Roman`.
    static let helveticaNeueRoman = Rswift.FontResource(fontName: "HelveticaNeue-Roman")
    /// Font `HelveticaNeue-ThinCondObl`.
    static let helveticaNeueThinCondObl = Rswift.FontResource(fontName: "HelveticaNeue-ThinCondObl")
    /// Font `HelveticaNeue-ThinCond`.
    static let helveticaNeueThinCond = Rswift.FontResource(fontName: "HelveticaNeue-ThinCond")
    /// Font `HelveticaNeue-ThinExtObl`.
    static let helveticaNeueThinExtObl = Rswift.FontResource(fontName: "HelveticaNeue-ThinExtObl")
    /// Font `HelveticaNeue-ThinItalic`.
    static let helveticaNeueThinItalic = Rswift.FontResource(fontName: "HelveticaNeue-ThinItalic")
    /// Font `HelveticaNeue-Thin`.
    static let helveticaNeueThin = Rswift.FontResource(fontName: "HelveticaNeue-Thin")
    /// Font `HelveticaNeue-UltraLigCondObl`.
    static let helveticaNeueUltraLigCondObl = Rswift.FontResource(fontName: "HelveticaNeue-UltraLigCondObl")
    /// Font `HelveticaNeue-UltraLigCond`.
    static let helveticaNeueUltraLigCond = Rswift.FontResource(fontName: "HelveticaNeue-UltraLigCond")
    /// Font `HelveticaNeue-UltraLigExt`.
    static let helveticaNeueUltraLigExt = Rswift.FontResource(fontName: "HelveticaNeue-UltraLigExt")
    /// Font `HelveticaNeue-UltraLightItalic`.
    static let helveticaNeueUltraLightItalic = Rswift.FontResource(fontName: "HelveticaNeue-UltraLightItalic")
    /// Font `HelveticaNeue-UltraLight`.
    static let helveticaNeueUltraLight = Rswift.FontResource(fontName: "HelveticaNeue-UltraLight")
    
    /// `UIFont(name: "HelveticaNeue-Black", size: ...)`
    static func helveticaNeueBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBlack, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BlackCond", size: ...)`
    static func helveticaNeueBlackCond(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBlackCond, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BlackCondObl", size: ...)`
    static func helveticaNeueBlackCondObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBlackCondObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BlackExt", size: ...)`
    static func helveticaNeueBlackExt(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBlackExt, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BlackExtObl", size: ...)`
    static func helveticaNeueBlackExtObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBlackExtObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BlackItalic", size: ...)`
    static func helveticaNeueBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBlackItalic, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-Bold", size: ...)`
    static func helveticaNeueBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBold, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BoldCondObl", size: ...)`
    static func helveticaNeueBoldCondObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBoldCondObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BoldExt", size: ...)`
    static func helveticaNeueBoldExt(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBoldExt, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BoldExtObl", size: ...)`
    static func helveticaNeueBoldExtObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBoldExtObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BoldItalic", size: ...)`
    static func helveticaNeueBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBoldItalic, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-BoldOutline", size: ...)`
    static func helveticaNeueBoldOutline(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBoldOutline, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-Condensed", size: ...)`
    static func helveticaNeueCondensed(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueCondensed, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-CondensedBlack", size: ...)`
    static func helveticaNeueCondensedBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueCondensedBlack, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-CondensedBold", size: ...)`
    static func helveticaNeueCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueCondensedBold, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-CondensedObl", size: ...)`
    static func helveticaNeueCondensedObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueCondensedObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-ExtBlackCond", size: ...)`
    static func helveticaNeueExtBlackCond(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueExtBlackCond, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-ExtBlackCondObl", size: ...)`
    static func helveticaNeueExtBlackCondObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueExtBlackCondObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-Extended", size: ...)`
    static func helveticaNeueExtended(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueExtended, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-ExtendedObl", size: ...)`
    static func helveticaNeueExtendedObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueExtendedObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-Heavy", size: ...)`
    static func helveticaNeueHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueHeavy, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-HeavyCond", size: ...)`
    static func helveticaNeueHeavyCond(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueHeavyCond, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-HeavyCondObl", size: ...)`
    static func helveticaNeueHeavyCondObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueHeavyCondObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-HeavyExt", size: ...)`
    static func helveticaNeueHeavyExt(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueHeavyExt, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-HeavyExtObl", size: ...)`
    static func helveticaNeueHeavyExtObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueHeavyExtObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-HeavyItalic", size: ...)`
    static func helveticaNeueHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-Italic", size: ...)`
    static func helveticaNeueItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueItalic, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-LightCond", size: ...)`
    static func helveticaNeueLightCond(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueLightCond, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-LightCondObl", size: ...)`
    static func helveticaNeueLightCondObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueLightCondObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-LightExt", size: ...)`
    static func helveticaNeueLightExt(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueLightExt, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-LightExtObl", size: ...)`
    static func helveticaNeueLightExtObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueLightExtObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-MediumCond", size: ...)`
    static func helveticaNeueMediumCond(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueMediumCond, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-MediumCondObl", size: ...)`
    static func helveticaNeueMediumCondObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueMediumCondObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-MediumExt", size: ...)`
    static func helveticaNeueMediumExt(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueMediumExt, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-MediumExtObl", size: ...)`
    static func helveticaNeueMediumExtObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueMediumExtObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-Roman", size: ...)`
    static func helveticaNeueRoman(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueRoman, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-Thin", size: ...)`
    static func helveticaNeueThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueThin, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-ThinCond", size: ...)`
    static func helveticaNeueThinCond(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueThinCond, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-ThinCondObl", size: ...)`
    static func helveticaNeueThinCondObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueThinCondObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-ThinExtObl", size: ...)`
    static func helveticaNeueThinExtObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueThinExtObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-ThinItalic", size: ...)`
    static func helveticaNeueThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueThinItalic, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-UltraLigCond", size: ...)`
    static func helveticaNeueUltraLigCond(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueUltraLigCond, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-UltraLigCondObl", size: ...)`
    static func helveticaNeueUltraLigCondObl(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueUltraLigCondObl, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-UltraLigExt", size: ...)`
    static func helveticaNeueUltraLigExt(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueUltraLigExt, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-UltraLight", size: ...)`
    static func helveticaNeueUltraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueUltraLight, size: size)
    }
    
    /// `UIFont(name: "HelveticaNeue-UltraLightItalic", size: ...)`
    static func helveticaNeueUltraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueUltraLightItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.helveticaNeueBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Black' could not be loaded, is 'HelveticaNeue-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBlackCond(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BlackCond' could not be loaded, is 'HelveticaNeue-BlackCond.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBlackCondObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BlackCondObl' could not be loaded, is 'HelveticaNeue-BlackCondObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBlackExt(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BlackExt' could not be loaded, is 'HelveticaNeue-BlackExt.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBlackExtObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BlackExtObl' could not be loaded, is 'HelveticaNeue-BlackExtObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BlackItalic' could not be loaded, is 'HelveticaBlkIt.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Bold' could not be loaded, is 'HelveticaNeueBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBoldCondObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BoldCondObl' could not be loaded, is 'HelveticaNeue-BoldCondObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBoldExt(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BoldExt' could not be loaded, is 'HelveticaNeue-BoldExt.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBoldExtObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BoldExtObl' could not be loaded, is 'HelveticaNeue-BoldExtObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BoldItalic' could not be loaded, is 'HelveticaNeueBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBoldOutline(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-BoldOutline' could not be loaded, is 'helvetica-75-bold-outline-587ebe00b76ba.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueCondensed(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Condensed' could not be loaded, is 'HelveticaNeue-Condensed.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueCondensedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-CondensedBlack' could not be loaded, is 'HelveticaNeueCondensedBlack.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-CondensedBold' could not be loaded, is 'HelveticaNeueCondensedBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueCondensedObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-CondensedObl' could not be loaded, is 'HelveticaNeue-CondensedObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueExtBlackCond(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-ExtBlackCond' could not be loaded, is 'HelveticaNeue-ExtBlackCond.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueExtBlackCondObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-ExtBlackCondObl' could not be loaded, is 'HelveticaNeue-ExtBlackCondObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueExtended(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Extended' could not be loaded, is 'HelveticaNeue-Extended.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueExtendedObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-ExtendedObl' could not be loaded, is 'HelveticaNeue-ExtendedObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Heavy' could not be loaded, is 'HelveticaNeue-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueHeavyCond(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-HeavyCond' could not be loaded, is 'HelveticaNeue-HeavyCond.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueHeavyCondObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-HeavyCondObl' could not be loaded, is 'HelveticaNeue-HeavyCondObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueHeavyExt(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-HeavyExt' could not be loaded, is 'HelveticaNeue-HeavyExt.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueHeavyExtObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-HeavyExtObl' could not be loaded, is 'HelveticaNeue-HeavyExtObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-HeavyItalic' could not be loaded, is 'HelveticaNeue-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Italic' could not be loaded, is 'HelveticaNeueItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueLightCond(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-LightCond' could not be loaded, is 'helvetica-47-light-condensed-587ebd7b5a6f6.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueLightCondObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-LightCondObl' could not be loaded, is 'HelveticaNeue-LightCondObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueLightExt(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-LightExt' could not be loaded, is 'HelveticaNeue-LightExt.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueLightExtObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-LightExtObl' could not be loaded, is 'HelveticaNeue-LightExtObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueMediumCond(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-MediumCond' could not be loaded, is 'HelveticaNeue-MediumCond.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueMediumCondObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-MediumCondObl' could not be loaded, is 'HelveticaNeue-MediumCondObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueMediumExt(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-MediumExt' could not be loaded, is 'HelveticaNeue-MediumExt.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueMediumExtObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-MediumExtObl' could not be loaded, is 'HelveticaNeue-MediumExtObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueRoman(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Roman' could not be loaded, is 'HelveticaNeue-Roman.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Thin' could not be loaded, is 'HelveticaNeue-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueThinCond(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-ThinCond' could not be loaded, is 'HelveticaNeue-ThinCond.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueThinCondObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-ThinCondObl' could not be loaded, is 'HelveticaNeue-ThinCondObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueThinExtObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-ThinExtObl' could not be loaded, is 'HelveticaNeue-ThinExtObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-ThinItalic' could not be loaded, is 'HelveticaNeue-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueUltraLigCond(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-UltraLigCond' could not be loaded, is 'HelveticaNeue-UltraLigCond.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueUltraLigCondObl(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-UltraLigCondObl' could not be loaded, is 'HelveticaNeue-UltraLigCondObl.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueUltraLigExt(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-UltraLigExt' could not be loaded, is 'HelveticaNeue-UltraLigExt.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueUltraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-UltraLight' could not be loaded, is 'HelveticaNeueUltraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueUltraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-UltraLightItalic' could not be loaded, is 'HelveticaNeueUltraLightItal.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `analysis`.
    static let analysis = Rswift.ImageResource(bundle: R.hostingBundle, name: "analysis")
    /// Image `cashCoins`.
    static let cashCoins = Rswift.ImageResource(bundle: R.hostingBundle, name: "cashCoins")
    /// Image `money`.
    static let money = Rswift.ImageResource(bundle: R.hostingBundle, name: "money")
    /// Image `piggyBank`.
    static let piggyBank = Rswift.ImageResource(bundle: R.hostingBundle, name: "piggyBank")
    
    /// `UIImage(named: "analysis", bundle: ..., traitCollection: ...)`
    static func analysis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.analysis, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cashCoins", bundle: ..., traitCollection: ...)`
    static func cashCoins(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cashCoins, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "money", bundle: ..., traitCollection: ...)`
    static func money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "piggyBank", bundle: ..., traitCollection: ...)`
    static func piggyBank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.piggyBank, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// en translation: Аналізуйте
      /// 
      /// Locales: en
      static let titleTutorialThirdSlide = Rswift.StringResource(key: "titleTutorialThirdSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Заощаджуйте кошти
      /// 
      /// Locales: en
      static let titleTutorialFirstSlide = Rswift.StringResource(key: "titleTutorialFirstSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Заробляйте
      /// 
      /// Locales: en
      static let titleTutorialSecondSlide = Rswift.StringResource(key: "titleTutorialSecondSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отримайте вигідний відсоток з вигідним вкладом
      /// 
      /// Locales: en
      static let descriptionTutorialSecondSlide = Rswift.StringResource(key: "descriptionTutorialSecondSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Переглядайте інформацію щодо банківських курсів та вибирайте оптимальний варіант
      /// 
      /// Locales: en
      static let descriptionTutorialFirstSlide = Rswift.StringResource(key: "descriptionTutorialFirstSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Повна інформація про грошові курси та банки
      /// 
      /// Locales: en
      static let descriptionTutorialThirdSlide = Rswift.StringResource(key: "descriptionTutorialThirdSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Розпочати
      /// 
      /// Locales: en
      static let titleButton = Rswift.StringResource(key: "titleButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Аналізуйте
      /// 
      /// Locales: en
      static func titleTutorialThirdSlide(_: Void = ()) -> String {
        return NSLocalizedString("titleTutorialThirdSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Заощаджуйте кошти
      /// 
      /// Locales: en
      static func titleTutorialFirstSlide(_: Void = ()) -> String {
        return NSLocalizedString("titleTutorialFirstSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Заробляйте
      /// 
      /// Locales: en
      static func titleTutorialSecondSlide(_: Void = ()) -> String {
        return NSLocalizedString("titleTutorialSecondSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Отримайте вигідний відсоток з вигідним вкладом
      /// 
      /// Locales: en
      static func descriptionTutorialSecondSlide(_: Void = ()) -> String {
        return NSLocalizedString("descriptionTutorialSecondSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Переглядайте інформацію щодо банківських курсів та вибирайте оптимальний варіант
      /// 
      /// Locales: en
      static func descriptionTutorialFirstSlide(_: Void = ()) -> String {
        return NSLocalizedString("descriptionTutorialFirstSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Повна інформація про грошові курси та банки
      /// 
      /// Locales: en
      static func descriptionTutorialThirdSlide(_: Void = ()) -> String {
        return NSLocalizedString("descriptionTutorialThirdSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Розпочати
      /// 
      /// Locales: en
      static func titleButton(_: Void = ()) -> String {
        return NSLocalizedString("titleButton", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TutorialVC
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
