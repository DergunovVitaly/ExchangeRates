//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `lightBlue`.
    static let lightBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightBlue")
    /// Color `lightGrey`.
    static let lightGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGrey")
    
    /// `UIColor(named: "lightBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "lightGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrey, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 51 files.
  struct file {
    /// Resource file `HelveticaBlkIt.ttf`.
    static let helveticaBlkItTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaBlkIt", pathExtension: "ttf")
    /// Resource file `HelveticaNeue-Black.otf`.
    static let helveticaNeueBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-Black", pathExtension: "otf")
    /// Resource file `HelveticaNeue-BlackCond.otf`.
    static let helveticaNeueBlackCondOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-BlackCond", pathExtension: "otf")
    /// Resource file `HelveticaNeue-BlackCondObl.otf`.
    static let helveticaNeueBlackCondOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-BlackCondObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-BlackExt.otf`.
    static let helveticaNeueBlackExtOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-BlackExt", pathExtension: "otf")
    /// Resource file `HelveticaNeue-BlackExtObl.otf`.
    static let helveticaNeueBlackExtOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-BlackExtObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-BoldCondObl.otf`.
    static let helveticaNeueBoldCondOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-BoldCondObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-BoldExt.otf`.
    static let helveticaNeueBoldExtOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-BoldExt", pathExtension: "otf")
    /// Resource file `HelveticaNeue-BoldExtObl.otf`.
    static let helveticaNeueBoldExtOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-BoldExtObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-Condensed.otf`.
    static let helveticaNeueCondensedOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-Condensed", pathExtension: "otf")
    /// Resource file `HelveticaNeue-CondensedObl.otf`.
    static let helveticaNeueCondensedOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-CondensedObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-ExtBlackCond.otf`.
    static let helveticaNeueExtBlackCondOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-ExtBlackCond", pathExtension: "otf")
    /// Resource file `HelveticaNeue-ExtBlackCondObl.otf`.
    static let helveticaNeueExtBlackCondOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-ExtBlackCondObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-Extended.otf`.
    static let helveticaNeueExtendedOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-Extended", pathExtension: "otf")
    /// Resource file `HelveticaNeue-ExtendedObl.otf`.
    static let helveticaNeueExtendedOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-ExtendedObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-Heavy.otf`.
    static let helveticaNeueHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-Heavy", pathExtension: "otf")
    /// Resource file `HelveticaNeue-HeavyCond.otf`.
    static let helveticaNeueHeavyCondOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-HeavyCond", pathExtension: "otf")
    /// Resource file `HelveticaNeue-HeavyCondObl.otf`.
    static let helveticaNeueHeavyCondOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-HeavyCondObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-HeavyExt.otf`.
    static let helveticaNeueHeavyExtOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-HeavyExt", pathExtension: "otf")
    /// Resource file `HelveticaNeue-HeavyExtObl.otf`.
    static let helveticaNeueHeavyExtOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-HeavyExtObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-HeavyItalic.otf`.
    static let helveticaNeueHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-HeavyItalic", pathExtension: "otf")
    /// Resource file `HelveticaNeue-Light.otf`.
    static let helveticaNeueLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-Light", pathExtension: "otf")
    /// Resource file `HelveticaNeue-LightCondObl.otf`.
    static let helveticaNeueLightCondOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-LightCondObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-LightExt.otf`.
    static let helveticaNeueLightExtOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-LightExt", pathExtension: "otf")
    /// Resource file `HelveticaNeue-LightExtObl.otf`.
    static let helveticaNeueLightExtOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-LightExtObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-Medium.otf`.
    static let helveticaNeueMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-Medium", pathExtension: "otf")
    /// Resource file `HelveticaNeue-MediumCond.otf`.
    static let helveticaNeueMediumCondOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-MediumCond", pathExtension: "otf")
    /// Resource file `HelveticaNeue-MediumCondObl.otf`.
    static let helveticaNeueMediumCondOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-MediumCondObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-MediumExt.otf`.
    static let helveticaNeueMediumExtOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-MediumExt", pathExtension: "otf")
    /// Resource file `HelveticaNeue-MediumExtObl.otf`.
    static let helveticaNeueMediumExtOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-MediumExtObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-Roman.otf`.
    static let helveticaNeueRomanOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-Roman", pathExtension: "otf")
    /// Resource file `HelveticaNeue-Thin.otf`.
    static let helveticaNeueThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-Thin", pathExtension: "otf")
    /// Resource file `HelveticaNeue-ThinCond.otf`.
    static let helveticaNeueThinCondOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-ThinCond", pathExtension: "otf")
    /// Resource file `HelveticaNeue-ThinCondObl.otf`.
    static let helveticaNeueThinCondOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-ThinCondObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-ThinExtObl.otf`.
    static let helveticaNeueThinExtOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-ThinExtObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-ThinItalic.otf`.
    static let helveticaNeueThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-ThinItalic", pathExtension: "otf")
    /// Resource file `HelveticaNeue-UltraLigCond.otf`.
    static let helveticaNeueUltraLigCondOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-UltraLigCond", pathExtension: "otf")
    /// Resource file `HelveticaNeue-UltraLigCondObl.otf`.
    static let helveticaNeueUltraLigCondOblOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-UltraLigCondObl", pathExtension: "otf")
    /// Resource file `HelveticaNeue-UltraLigExt.otf`.
    static let helveticaNeueUltraLigExtOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeue-UltraLigExt", pathExtension: "otf")
    /// Resource file `HelveticaNeueBoldItalic.ttf`.
    static let helveticaNeueBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueBoldItalic", pathExtension: "ttf")
    /// Resource file `HelveticaNeueCondensedBlack.ttf`.
    static let helveticaNeueCondensedBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueCondensedBlack", pathExtension: "ttf")
    /// Resource file `HelveticaNeueCondensedBold.ttf`.
    static let helveticaNeueCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueCondensedBold", pathExtension: "ttf")
    /// Resource file `HelveticaNeueItalic.ttf`.
    static let helveticaNeueItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueItalic", pathExtension: "ttf")
    /// Resource file `HelveticaNeueLight.ttf`.
    static let helveticaNeueLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueLight", pathExtension: "ttf")
    /// Resource file `HelveticaNeueLightItalic.ttf`.
    static let helveticaNeueLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueLightItalic", pathExtension: "ttf")
    /// Resource file `HelveticaNeueMedium.ttf`.
    static let helveticaNeueMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueMedium", pathExtension: "ttf")
    /// Resource file `HelveticaNeueUltraLight.ttf`.
    static let helveticaNeueUltraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueUltraLight", pathExtension: "ttf")
    /// Resource file `HelveticaNeueUltraLightItal.ttf`.
    static let helveticaNeueUltraLightItalTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HelveticaNeueUltraLightItal", pathExtension: "ttf")
    /// Resource file `helvetica-46-light-italic-587ebdb0ea724.ttf`.
    static let helvetica46LightItalic587ebdb0ea724Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "helvetica-46-light-italic-587ebdb0ea724", pathExtension: "ttf")
    /// Resource file `helvetica-47-light-condensed-587ebd7b5a6f6.ttf`.
    static let helvetica47LightCondensed587ebd7b5a6f6Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "helvetica-47-light-condensed-587ebd7b5a6f6", pathExtension: "ttf")
    /// Resource file `helvetica-75-bold-outline-587ebe00b76ba.ttf`.
    static let helvetica75BoldOutline587ebe00b76baTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "helvetica-75-bold-outline-587ebe00b76ba", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "HelveticaBlkIt", withExtension: "ttf")`
    static func helveticaBlkItTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaBlkItTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-Black", withExtension: "otf")`
    static func helveticaNeueBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-BlackCond", withExtension: "otf")`
    static func helveticaNeueBlackCondOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBlackCondOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-BlackCondObl", withExtension: "otf")`
    static func helveticaNeueBlackCondOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBlackCondOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-BlackExt", withExtension: "otf")`
    static func helveticaNeueBlackExtOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBlackExtOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-BlackExtObl", withExtension: "otf")`
    static func helveticaNeueBlackExtOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBlackExtOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-BoldCondObl", withExtension: "otf")`
    static func helveticaNeueBoldCondOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBoldCondOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-BoldExt", withExtension: "otf")`
    static func helveticaNeueBoldExtOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBoldExtOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-BoldExtObl", withExtension: "otf")`
    static func helveticaNeueBoldExtOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBoldExtOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-Condensed", withExtension: "otf")`
    static func helveticaNeueCondensedOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueCondensedOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-CondensedObl", withExtension: "otf")`
    static func helveticaNeueCondensedOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueCondensedOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-ExtBlackCond", withExtension: "otf")`
    static func helveticaNeueExtBlackCondOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueExtBlackCondOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-ExtBlackCondObl", withExtension: "otf")`
    static func helveticaNeueExtBlackCondOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueExtBlackCondOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-Extended", withExtension: "otf")`
    static func helveticaNeueExtendedOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueExtendedOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-ExtendedObl", withExtension: "otf")`
    static func helveticaNeueExtendedOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueExtendedOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-Heavy", withExtension: "otf")`
    static func helveticaNeueHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-HeavyCond", withExtension: "otf")`
    static func helveticaNeueHeavyCondOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueHeavyCondOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-HeavyCondObl", withExtension: "otf")`
    static func helveticaNeueHeavyCondOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueHeavyCondOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-HeavyExt", withExtension: "otf")`
    static func helveticaNeueHeavyExtOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueHeavyExtOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-HeavyExtObl", withExtension: "otf")`
    static func helveticaNeueHeavyExtOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueHeavyExtOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-HeavyItalic", withExtension: "otf")`
    static func helveticaNeueHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-Light", withExtension: "otf")`
    static func helveticaNeueLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-LightCondObl", withExtension: "otf")`
    static func helveticaNeueLightCondOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueLightCondOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-LightExt", withExtension: "otf")`
    static func helveticaNeueLightExtOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueLightExtOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-LightExtObl", withExtension: "otf")`
    static func helveticaNeueLightExtOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueLightExtOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-Medium", withExtension: "otf")`
    static func helveticaNeueMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-MediumCond", withExtension: "otf")`
    static func helveticaNeueMediumCondOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueMediumCondOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-MediumCondObl", withExtension: "otf")`
    static func helveticaNeueMediumCondOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueMediumCondOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-MediumExt", withExtension: "otf")`
    static func helveticaNeueMediumExtOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueMediumExtOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-MediumExtObl", withExtension: "otf")`
    static func helveticaNeueMediumExtOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueMediumExtOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-Roman", withExtension: "otf")`
    static func helveticaNeueRomanOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueRomanOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-Thin", withExtension: "otf")`
    static func helveticaNeueThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-ThinCond", withExtension: "otf")`
    static func helveticaNeueThinCondOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueThinCondOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-ThinCondObl", withExtension: "otf")`
    static func helveticaNeueThinCondOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueThinCondOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-ThinExtObl", withExtension: "otf")`
    static func helveticaNeueThinExtOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueThinExtOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-ThinItalic", withExtension: "otf")`
    static func helveticaNeueThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-UltraLigCond", withExtension: "otf")`
    static func helveticaNeueUltraLigCondOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueUltraLigCondOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-UltraLigCondObl", withExtension: "otf")`
    static func helveticaNeueUltraLigCondOblOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueUltraLigCondOblOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeue-UltraLigExt", withExtension: "otf")`
    static func helveticaNeueUltraLigExtOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueUltraLigExtOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueBoldItalic", withExtension: "ttf")`
    static func helveticaNeueBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueCondensedBlack", withExtension: "ttf")`
    static func helveticaNeueCondensedBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueCondensedBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueCondensedBold", withExtension: "ttf")`
    static func helveticaNeueCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueItalic", withExtension: "ttf")`
    static func helveticaNeueItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueLight", withExtension: "ttf")`
    static func helveticaNeueLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueLightItalic", withExtension: "ttf")`
    static func helveticaNeueLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueMedium", withExtension: "ttf")`
    static func helveticaNeueMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueUltraLight", withExtension: "ttf")`
    static func helveticaNeueUltraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueUltraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "HelveticaNeueUltraLightItal", withExtension: "ttf")`
    static func helveticaNeueUltraLightItalTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaNeueUltraLightItalTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "helvetica-46-light-italic-587ebdb0ea724", withExtension: "ttf")`
    static func helvetica46LightItalic587ebdb0ea724Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helvetica46LightItalic587ebdb0ea724Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "helvetica-47-light-condensed-587ebd7b5a6f6", withExtension: "ttf")`
    static func helvetica47LightCondensed587ebd7b5a6f6Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helvetica47LightCondensed587ebd7b5a6f6Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "helvetica-75-bold-outline-587ebe00b76ba", withExtension: "ttf")`
    static func helvetica75BoldOutline587ebe00b76baTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helvetica75BoldOutline587ebe00b76baTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `HelveticaNeue-Bold`.
    static let helveticaNeueBold = Rswift.FontResource(fontName: "HelveticaNeue-Bold")
    
    /// `UIFont(name: "HelveticaNeue-Bold", size: ...)`
    static func helveticaNeueBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBold, size: size)
    }
    
    static func validate() throws {
      if R.font.helveticaNeueBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Bold' could not be loaded, is 'HelveticaNeueBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `analysis`.
    static let analysis = Rswift.ImageResource(bundle: R.hostingBundle, name: "analysis")
    /// Image `coins`.
    static let coins = Rswift.ImageResource(bundle: R.hostingBundle, name: "coins")
    /// Image `money`.
    static let money = Rswift.ImageResource(bundle: R.hostingBundle, name: "money")
    /// Image `piggyBank`.
    static let piggyBank = Rswift.ImageResource(bundle: R.hostingBundle, name: "piggyBank")
    
    /// `UIImage(named: "analysis", bundle: ..., traitCollection: ...)`
    static func analysis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.analysis, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "coins", bundle: ..., traitCollection: ...)`
    static func coins(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coins, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "money", bundle: ..., traitCollection: ...)`
    static func money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "piggyBank", bundle: ..., traitCollection: ...)`
    static func piggyBank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.piggyBank, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// en translation: Аналізуйте
      /// 
      /// Locales: en
      static let titleTutorialThirdSlide = Rswift.StringResource(key: "titleTutorialThirdSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Заощаджуйте кошти
      /// 
      /// Locales: en
      static let titleTutorialFirstSlide = Rswift.StringResource(key: "titleTutorialFirstSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Заробляйте
      /// 
      /// Locales: en
      static let titleTutorialSecondSlide = Rswift.StringResource(key: "titleTutorialSecondSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Отримайте вигідний відсоток з вигідним вкладом
      /// 
      /// Locales: en
      static let descriptionTutorialSecondSlide = Rswift.StringResource(key: "descriptionTutorialSecondSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Переглядайте інформацію щодо банківських курсів та вибирайте оптимальний варіант
      /// 
      /// Locales: en
      static let descriptionTutorialFirstSlide = Rswift.StringResource(key: "descriptionTutorialFirstSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Повна інформація про грошові курси та банки
      /// 
      /// Locales: en
      static let descriptionTutorialThirdSlide = Rswift.StringResource(key: "descriptionTutorialThirdSlide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: РОЗПОЧАТИ
      /// 
      /// Locales: en
      static let titleButton = Rswift.StringResource(key: "titleButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Аналізуйте
      /// 
      /// Locales: en
      static func titleTutorialThirdSlide(_: Void = ()) -> String {
        return NSLocalizedString("titleTutorialThirdSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Заощаджуйте кошти
      /// 
      /// Locales: en
      static func titleTutorialFirstSlide(_: Void = ()) -> String {
        return NSLocalizedString("titleTutorialFirstSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Заробляйте
      /// 
      /// Locales: en
      static func titleTutorialSecondSlide(_: Void = ()) -> String {
        return NSLocalizedString("titleTutorialSecondSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Отримайте вигідний відсоток з вигідним вкладом
      /// 
      /// Locales: en
      static func descriptionTutorialSecondSlide(_: Void = ()) -> String {
        return NSLocalizedString("descriptionTutorialSecondSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Переглядайте інформацію щодо банківських курсів та вибирайте оптимальний варіант
      /// 
      /// Locales: en
      static func descriptionTutorialFirstSlide(_: Void = ()) -> String {
        return NSLocalizedString("descriptionTutorialFirstSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Повна інформація про грошові курси та банки
      /// 
      /// Locales: en
      static func descriptionTutorialThirdSlide(_: Void = ()) -> String {
        return NSLocalizedString("descriptionTutorialThirdSlide", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: РОЗПОЧАТИ
      /// 
      /// Locales: en
      static func titleButton(_: Void = ()) -> String {
        return NSLocalizedString("titleButton", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TutorialVC
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
